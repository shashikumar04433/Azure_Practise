
name: MQ_QRIUS_Webapp_Pipeline

on:
  workflow_dispatch:

permissions:
  id-token: write
  contents: read 

env:
  DOCKER_REGISTRY: ${{ vars.DOCKER_REGISTRY }} 
  ACR_NAME: ${{ vars.ACR_NAME }} 
  serviceaccount: ${{ vars.SERVICEACCOUNT }}
  namespace: ${{ vars.NAMESPACE }}
  CLIENT_ID_SA: ${{ secrets.CLIENT_ID_SA }}
  REACT_APP_ALERT_MESSAGE: ${{ vars.REACT_APP_ALERT_MESSAGE }}
  REACT_APP_DATASOURCE_URL: ${{ vars.REACT_APP_DATASOURCE_URL }}
  REACT_APP_ENDPOINT_CONFIGURATION_SERVER: ${{ vars.REACT_APP_ENDPOINT_CONFIGURATION_SERVER }}
  REACT_APP_ENDPOINT_QUERY_SERVER: ${{ vars.REACT_APP_ENDPOINT_QUERY_SERVER }}
  REACT_APP_SITE_TITLE: ${{ vars.REACT_APP_SITE_TITLE }}
  DOCKERFILE_PATH: ${{ vars.DOCKERFILE_PATH }}
  env: ${{ vars.env }}
  system_debug: ${{ vars.system_debug }}
  AKS_RG: ${{ vars.AKS_RG }}
  AKS_CLUSTER: ${{ vars.AKS_CLUSTER }}

jobs:
  deploy-to-aks:
    runs-on: azure-devdx-ubuntu-latest-2-core

    steps:
      - name: Checkout source code
        uses: actions/checkout@v4.1.0

      - name: Log into Azure CLI
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.CLIENT_ID }}
          tenant-id: ${{ secrets.TENANTID }}
          subscription-id: ${{ secrets.SUBSCRIPTION_ID }}
          enable-AzPSSession: true
          allow-no-subscriptions: true

      - name: Login to ACR
        run: az acr login --name ${{ env.ACR_NAME }}

      - name: Build & Push WebApp Image
        run: |
          REPO_NAME=$(echo "${{ github.repository }}" | tr '[:upper:]' '[:lower:]')
          IMAGE_TAG="${{ github.run_id }}"
          WEBAPP_IMAGE="${{ env.DOCKER_REGISTRY }}/${{ env.ACR_NAME }}/$REPO_NAME:$IMAGE_TAG"
          echo "Building and pushing image: $WEBAPP_IMAGE"
          docker build -f mq_qrius_-_DEV/MQ_QRIUS-Webapp/Dockerfile -t "$WEBAPP_IMAGE" mq_qrius_-_DEV/MQ_QRIUS-Webapp
          docker push "$WEBAPP_IMAGE"
          echo "WEBAPP_IMAGE=$WEBAPP_IMAGE" >> $GITHUB_ENV
      - name: Get AKS Credentials
        run: |
          az aks get-credentials --resource-group ${{ env.AKS_RG }} --name ${{ env.AKS_CLUSTER }} --overwrite-existing
      - name: Install kubelogin on Linux
        run: |
          curl -L -o kubelogin.zip https://github.com/Azure/kubelogin/releases/download/v0.0.28/kubelogin-linux-amd64.zip
          unzip kubelogin.zip -d kubelogin-extract
          chmod +x kubelogin-extract/bin/linux_amd64/kubelogin
          sudo mv kubelogin-extract/bin/linux_amd64/kubelogin /usr/local/bin/kubelogin
      - name: Convert kubeconfig for exec auth with kubelogin
        run: kubelogin convert-kubeconfig -l azurecli

      - name: Create namespace if not exists
        run: |
          kubectl get namespace ${{ env.namespace }} || kubectl create namespace ${{ env.namespace }}
      - name: Render deploy.yml with environment variables
        env:
          WEBAPP_IMAGE: ${{ env.WEBAPP_IMAGE }}
          NAMESPACE: ${{ env.namespace }}
          SERVICEACCOUNT: ${{ env.serviceaccount }}
          REACT_APP_ENDPOINT_QUERY_SERVER: ${{ env.REACT_APP_ENDPOINT_QUERY_SERVER }}
          REACT_APP_ENDPOINT_CONFIGURATION_SERVER: ${{ env.REACT_APP_ENDPOINT_CONFIGURATION_SERVER }}
          REACT_APP_DATASOURCE_URL: ${{ env.REACT_APP_DATASOURCE_URL }}
        run: |
          echo "Rendering deploy.yml with environment variables"
          envsubst < mq_qrius_-_DEV/MQ_QRIUS-Webapp/deploy.yml > rendered-deploy.yml
          cat rendered-deploy.yml
      - name: Deploy QRIUS WebApp
        run: kubectl apply -f rendered-deploy.yml
